services:
    nginx-web:
        build:
            context: .
            dockerfile: ./docker/prod/nginx-web/Dockerfile
        restart: unless-stopped
        volumes:
            # Mount as read-only for nginx - it only needs to serve files
            - laravel-storage-production:/var/www/storage
            # Add nginx cache volume for better performance
            - nginx-cache-production:/var/cache/nginx
        networks:
            - yc-rf-cnt-net
        ports:
            - "${NGINX_PORT:-33034}:80" # Fixed: map to standard nginx port 80 inside container
        depends_on:
            php-fpm:
                condition: service_healthy
        # Resource limits for nginx
        deploy:
            resources:
                limits:
                    memory: 128M
                    cpus: "0.5"
                reservations:
                    memory: 64M
                    cpus: "0.25"
        # Security: run as non-root user
        user: "101:101" # nginx user
        # Health check for nginx
        healthcheck:
            test:
                [
                    "CMD",
                    "curl",
                    "-f",
                    "http://localhost/health-check",
                    "||",
                    "exit",
                    "1",
                ]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    # Php-CLI Service
    php-cli:
        build:
            context: .
            dockerfile: ./docker/prod/php-cli/Dockerfile
            target: production
        restart: unless-stopped
        deploy:
            replicas: ${PHP_CLI_REPLICAS:-1} # Make configurable, reduce default
        volumes:
            - laravel-storage-production:/var/www/storage
        environment:
            # Application settings
            APP_NAME: ${APP_NAME}
            APP_KEY: ${APP_KEY}
            APP_TIMEZONE: ${APP_TIMEZONE}
            APP_ENV: production
            APP_URL: ${APP_URL}
            APP_DEBUG: false

            # Database connection settings
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}

            # Cache Settings
            CACHE_DRIVER: ${CACHE_DRIVER}

            REDIS_HOST: ${REDIS_HOST:-redis}
            REDIS_PORT: ${REDIS_PORT:-6379}
            REDIS_PASSWORD: ${REDIS_PASSWORD:-null}
            REDIS_DATABASE: ${REDIS_DATABASE:-0}

            #Queue setinngs

            QUEUE_CONNECTION: ${QUEUE_CONNECTION}

            # Session settings
            SESSION_DRIVER: ${SESSION_DRIVER}
            SESSION_LIFETIME: ${SESSION_LIFETIME}

            # Mail settings
            MAIL_MAILER: ${MAIL_MAILER}
            MAIL_HOST: ${MAIL_HOST}
            MAIL_PORT: ${MAIL_PORT}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
            MAIL_FROM_NAME: ${MAIL_FROM_NAME}

            # AWS Settings
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
            AWS_BUCKET: ${AWS_BUCKET}

            # Pusher Settings
            PUSHER_APP_ID: ${PUSHER_APP_ID}
            PUSHER_APP_KEY: ${PUSHER_APP_KEY}
            PUSHER_APP_SECRET: ${PUSHER_APP_SECRET}
            PUSHER_APP_CLUSTER: ${PUSHER_APP_CLUSTER}

            # PHP optimizations
            PHP_MEMORY_LIMIT: 256M
            PHP_MAX_EXECUTION_TIME: 30
            PHP_POST_MAX_SIZE: 32M
            PHP_MAX_FILE_UPLOADS: 200
            PHP_MAX_INPUT_VARS: 1000

        networks:
            - yc-rf-cnt-net
        extra_hosts:
            - "host.docker.internal:host-gateway"
        # Security: run as non-root user
        user: "www-data:www-data"
        # Logging configuration
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"
        depends_on:
            redis:
                condition: service_healthy
                # Health check for php-cli
        healthcheck:
            test: ["CMD", "php", "-v", "||", "exit", "1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
            # dev>null
        command: ["tail", "-f", "/dev/null"]
    php-fpm:
        build:
            context: .
            dockerfile: ./docker/prod/php-fpm/Dockerfile
            target: production
        restart: unless-stopped
        deploy:
            replicas: ${PHP_FPM_REPLICAS:-2} # Make configurable, reduce default
            resources:
                limits:
                    memory: 512M
                    cpus: "1.0"
                reservations:
                    memory: 256M
                    cpus: "0.5"
        volumes:
            - laravel-storage-production:/var/www/storage
            # Add separate volume for PHP sessions
            - php-sessions-production:/var/lib/php/sessions
        environment:
            APP_NAME: ${APP_NAME}
            APP_KEY: ${APP_KEY}
            APP_TIMEZONE: ${APP_TIMEZONE}

            APP_ENV: production
            APP_URL: ${APP_URL}
            APP_DEBUG: false

            # Database connection settings
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}

            # Cache Settings
            CACHE_DRIVER: ${CACHE_DRIVER}

            # Redis settings
            # REDIS_HOST: ${REDIS_HOST:-redis}
            # REDIS_PORT: ${REDIS_PORT:-6379}
            # REDIS_PASSWORD: ${REDIS_PASSWORD:-null}
            # REDIS_DATABASE: ${REDIS_DATABASE:-0}

            # Redis settings
            #Queue setinngs

            QUEUE_CONNECTION: ${QUEUE_CONNECTION}

            # Session settings
            SESSION_DRIVER: ${SESSION_DRIVER}
            SESSION_LIFETIME: ${SESSION_LIFETIME}

            # Mail settings
            MAIL_MAILER: ${MAIL_MAILER}
            MAIL_HOST: ${MAIL_HOST}
            MAIL_PORT: ${MAIL_PORT}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
            MAIL_FROM_NAME: ${MAIL_FROM_NAME}

            # AWS Settings
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
            AWS_BUCKET: ${AWS_BUCKET}

            # Pusher Settings
            PUSHER_APP_ID: ${PUSHER_APP_ID}
            PUSHER_APP_KEY: ${PUSHER_APP_KEY}
            PUSHER_APP_SECRET: ${PUSHER_APP_SECRET}
            PUSHER_APP_CLUSTER: ${PUSHER_APP_CLUSTER}

            # PHP optimizations
            PHP_MEMORY_LIMIT: 256M
            PHP_MAX_EXECUTION_TIME: 30
            PHP_POST_MAX_SIZE: 32M
            PHP_MAX_FILE_UPLOADS: 200
            PHP_MAX_INPUT_VARS: 1000

        env_file:
            - .env
        networks:
            - yc-rf-cnt-net
        extra_hosts:
            - "host.docker.internal:host-gateway"
        # Security: run as non-root user
        user: "www-data:www-data"
        # Improved health check
        healthcheck:
            test:
                ["CMD-SHELL", "php-fpm-healthcheck --listen-queue=10 || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        depends_on:
            redis:
                condition: service_healthy
        # Logging configuration
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    # Laravel Queue workers with better resource management
    queue-workers:
        build:
            context: .
            dockerfile: ./docker/prod/queue-worker/Dockerfile
            target: production
        restart: unless-stopped
        deploy:
            replicas: ${QUEUE_WORKERS:-2} # Make configurable, reduce default
            resources:
                limits:
                    memory: 256M
                    cpus: "0.5"
                reservations:
                    memory: 128M
                    cpus: "0.25"
        volumes:
            - laravel-storage-production:/var/www/storage
        environment:
            APP_NAME: ${APP_NAME}
            APP_KEY: ${APP_KEY}
            APP_TIMEZONE: ${APP_TIMEZONE}

            APP_ENV: production
            APP_URL: ${APP_URL}
            APP_DEBUG: false
            # Database connection settings
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}

            # Cache Settings
            CACHE_DRIVER: ${CACHE_DRIVER}

            # Redis settings
            # REDIS_HOST: ${REDIS_HOST:-redis}
            # REDIS_PORT: ${REDIS_PORT:-6379}
            # REDIS_PASSWORD: ${REDIS_PASSWORD:-null}
            # REDIS_DATABASE: ${REDIS_DATABASE:-0}

            #Queue setinngs

            QUEUE_CONNECTION: ${QUEUE_CONNECTION}
            SESSION_DRIVER: ${SESSION_DRIVER}
            SESSION_LIFETIME: ${SESSION_LIFETIME}

            # Mail settings
            MAIL_MAILER: ${MAIL_MAILER}
            MAIL_HOST: ${MAIL_HOST}
            MAIL_PORT: ${MAIL_PORT}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
            MAIL_FROM_NAME: ${MAIL_FROM_NAME}

            # AWS Settings
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
            AWS_BUCKET: ${AWS_BUCKET}

            # Pusher Settings
            PUSHER_APP_ID: ${PUSHER_APP_ID}
            PUSHER_APP_KEY: ${PUSHER_APP_KEY}
            PUSHER_APP_SECRET: ${PUSHER_APP_SECRET}
            PUSHER_APP_CLUSTER: ${PUSHER_APP_CLUSTER}

            # PHP optimizations
            PHP_MEMORY_LIMIT: 256M
            PHP_MAX_EXECUTION_TIME: 30
            PHP_POST_MAX_SIZE: 32M
            PHP_MAX_FILE_UPLOADS: 200
            PHP_MAX_INPUT_VARS: 1000

        env_file:
            - .env
        networks:
            - yc-rf-cnt-net
        extra_hosts:
            - "host.docker.internal:host-gateway"
        # Health check for queue workers
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "php artisan queue:monitor --max-jobs=1000 || exit 1",
                ]
            interval: 60s
            timeout: 30s
            retries: 3
            start_period: 60s
        # Security: run as non-root user
        user: "www-data:www-data"
        depends_on:
            redis:
                condition: service_healthy
            php-fpm:
                condition: service_healthy
        # Logging configuration
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    # Redis with optimized configuration
    redis:
        image: redis:7-alpine # Use specific version for consistency
        restart: unless-stopped
        networks:
            - yc-rf-cnt-net
        volumes:
            # Persist Redis data - using Docker managed volume instead of bind mount
            - redis-data-production:/data
            # Custom Redis configuration - only if the file exists
            # - ./docker/production/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
        # Use default Redis configuration for now
        command: redis-server --requirepass ${REDIS_PASSWORD:-""}
        deploy:
            resources:
                limits:
                    memory: 256M
                    cpus: "0.5"
                reservations:
                    memory: 128M
                    cpus: "0.25"
        environment:
            # Redis configuration via environment
            REDIS_PASSWORD: ${REDIS_PASSWORD:-""}
            REDIS_USER: ${REDIS_USER}
            env_file: -.env
        # Security: run as non-root user
        user: "999:999" # redis user
        # Improved health check
        healthcheck:
            test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s
        # Logging configuration
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "3"

    # Optional: Add a separate scheduler service
    laravel-scheduler:
        build:
            context: .
            dockerfile: ./docker/prod/scheduler/Dockerfile
            target: production
        restart: unless-stopped
        volumes:
            - laravel-storage-production:/var/www/storage
        environment:
            # Application settings
            APP_NAME: ${APP_NAME}
            APP_KEY: ${APP_KEY}
            APP_TIMEZONE: ${APP_TIMEZONE}
            APP_ENV: production
            APP_URL: ${APP_URL}
            APP_DEBUG: false

            # Database connection settings
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE}
            DB_USERNAME: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}

            # Cache Settings
            CACHE_DRIVER: ${CACHE_DRIVER}

            # Optional: Add a separate queue worker service
            # REDIS_HOST: ${REDIS_HOST} # Fixed: Use correct service name
            # REDIS_PASSWORD: ${REDIS_PASSWORD}
            # REDIS_PORT: ${REDIS_PORT:-6379}

            #Queue settings
            QUEUE_CONNECTION: ${QUEUE_CONNECTION}
            SESSION_DRIVER: ${SESSION_DRIVER}
            SESSION_LIFETIME: ${SESSION_LIFETIME}

            # Mail settings
            MAIL_MAILER: ${MAIL_MAILER}
            MAIL_HOST: ${MAIL_HOST}
            MAIL_PORT: ${MAIL_PORT}
            MAIL_USERNAME: ${MAIL_USERNAME}
            MAIL_PASSWORD: ${MAIL_PASSWORD}
            MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
            MAIL_FROM_NAME: ${MAIL_FROM_NAME}

            # AWS Settings
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
            AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
            AWS_BUCKET: ${AWS_BUCKET}

            # Pusher Settings
            PUSHER_APP_ID: ${PUSHER_APP_ID}
            PUSHER_APP_KEY: ${PUSHER_APP_KEY}
            PUSHER_APP_SECRET: ${PUSHER_APP_SECRET}
            PUSHER_APP_CLUSTER: ${PUSHER_APP_CLUSTER}

            # PHP optimizations
            PHP_MEMORY_LIMIT: 256M
            PHP_MAX_EXECUTION_TIME: 30
            PHP_POST_MAX_SIZE: 32M
            PHP_MAX_FILE_UPLOADS: 200
            PHP_MAX_INPUT_VARS: 1000

        env_file:
            - .env
        networks:
            - yc-rf-cnt-net
        extra_hosts:
            - "host.docker.internal:host-gateway"
        user: "www-data:www-data"
        deploy:
            resources:
                limits:
                    memory: 128M
                    cpus: "0.25"
                reservations:
                    memory: 64M
                    cpus: "0.1"
        depends_on:
            redis:
                condition: service_healthy
            php-fpm:
                condition: service_healthy
                # Health check for scheduler

        profiles:
            - scheduler # Only start with --profile scheduler

networks:
    yc-rf-cnt-net:
        driver: bridge
        # Network configuration for better performance
        driver_opts:
            com.docker.network.bridge.name: voucher-br0
            com.docker.network.driver.mtu: 1500

volumes:
    # Existing volumes
    laravel-storage-production:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${STORAGE_PATH:-./production/laravel-storage-production}
    # New optimized volumes - using Docker managed volumes instead of bind mounts
    nginx-cache-production:
        driver: local

    php-sessions-production:
        driver: local

    redis-data-production:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ${STORAGE_PATH:-./production/redis-data-production}

    # Optional: Add a separate queue worker service
    # redis-queue-production:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         o: bind
    #         device: ${STORAGE_PATH:-./redis-queue-production}

    # # Optional: Add a separate scheduler service
    # redis-scheduler-production:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         o: bind
    #         device: ${STORAGE_PATH:-./redis-scheduler-production}

    # # Optional: Add a separate mail service
    # mail-data-production:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         o: bind
    #         device: ${STORAGE_PATH:-./mail-data-production}
